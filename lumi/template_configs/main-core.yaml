defaults:
- data: zarr
- dataloader: native_grid
- datamodule: single
- diagnostics: evaluation
- hardware: slurm
- graph: limited_area # --> we can create the graph in another step: uncomment this and only add minimum needed under 'graph'
- model: graphtransformer
- training: lam 
- override hydra/hydra_logging: disabled
- override hydra/job_logging: disabled
- _self_

config_validation: True

hydra:  
  output_subdir: null  
  run:  
    dir: .

data:
  frequency: 3h
  timestep: 3h
  forcing:
  - h
  - Pair             
  - Qair             
  - Tair   
  - Uwind
  - Vwind              
  #- cloud # available from 2017       
  - cos_julian_day   
  - cos_latitude     
  - cos_local_time   
  - cos_longitude    
  - f                
  - insolation       
  - rain             
  - river_binary_mask
  - sin_julian_day   
  - sin_latitude   
  - sin_local_time
  - sin_longitude
  - sea_mask

  diagnostic: []
    
  processors:
    imputer:
      _target_: anemoi.models.preprocessing.imputer.InputImputer
      config: 
        default: "none"
        mean:  
        - salinity_0
        - temperature_0
        - u_eastward_0
        - v_northward_0
        - zeta
        # Mean:
        # salinity_0 34.2275
        # temperature_0 8.85046375
        # u_eastward_0 0.0181013125
        # v_northward_0 0.013216155
        # zeta -0.22607975000000002
  
    normalizer:
      _target_: anemoi.models.preprocessing.normalizer.InputNormalizer

      config:
        default: "mean-std"
        std: []
        min-max:
        - salinity_0
        max: # Data is normalised by dividing by the max value (, so the ‘zero’ point and the proportional distance from this point is retained)
        - h
        none:
        - cos_julian_day   
        - cos_latitude     
        - cos_local_time   
        - cos_longitude  
        - insolation           
        - sin_julian_day   
        - sin_latitude   
        - sin_local_time
        - sin_longitude
        #- cloud # available from 2017
        - river_binary_mask
        - sea_mask
      
dataloader:
  num_workers:
    training: 2
    validation: 2
    test: 2
  batch_size: 
    training: 1 # has to be 1 for model-paralell
    validation: 1
    test: 1

  limit_batches:
    training: null
    validation: null
    test: 20 
  
  dataset:
    cutout:
    - dataset:
        join:
          - dataset: ${hardware.paths.data}/${hardware.files.dataset.dataset_main}
            frequency: ${data.frequency}
          - concat: # this part will be replaced once the full combined forcing file is done rsyncing
            - dataset: ${hardware.paths.data}/${hardware.files.dataset.dataset_force12-16}
              frequency: ${data.frequency}
              start: 2012
              end: 2016
            - dataset: ${hardware.paths.data}/${hardware.files.dataset.dataset_force17-24}
              frequency: ${data.frequency}
              start: 2017
              end: 2024
              drop: ["cloud"]
        adjust: ["start", "end"]
      trim_edge: 10
    - dataset:
        join:
          - dataset: ${hardware.paths.data}/${hardware.files.dataset.dataset_main}
            frequency: ${data.frequency}
          - concat: # this part will be replaced once the full combined forcing file is done rsyncing
            - dataset: ${hardware.paths.data}/${hardware.files.dataset.dataset_force12-16}
              frequency: ${data.frequency}
              start: 2012
              end: 2016
            - dataset: ${hardware.paths.data}/${hardware.files.dataset.dataset_force17-24}
              frequency: ${data.frequency}
              start: 2017
              end: 2024
              drop: ["cloud"]
        adjust: ["start", "end"]
    adjust: all
  grid_indices:
    _target_: anemoi.training.data.grid_indices.MaskedGrid
    nodes_name: data
    node_attribute_name: indices_connected_nodes

  training:
    dataset: ${dataloader.dataset} 
    start: 2012-01-01
    end: 2022-06-30
    drop: ['vbar_northward', 'ubar_eastward', 'Uwind_eastward', 'Vwind_northward']

  validation_rollout: 1 # TODO change later

  validation:
    dataset: ${dataloader.dataset}
    start: 2022-07-01
    end: 2023-09-30
    drop: ['vbar_northward', 'ubar_eastward', 'Uwind_eastward', 'Vwind_northward']
  test:
    dataset: ${dataloader.dataset}
    start: 2023-10-01
    end: 2024-12-31
    drop: ['vbar_northward', 'ubar_eastward', 'Uwind_eastward', 'Vwind_northward']

diagnostics:
  plot: 
    callbacks: []
  log:
    mlflow:
      enabled: True
      offline: True
      authentication: True
      tracking_uri: https://mlflow.ecmwf.int
      experiment_name: 'metno-fou'
      run_name: 'replace-me' #change this
    wandb: 
      entity: null
  print_memory_summary: True

hardware:
  paths:
    data: /pfs/lustrep3/scratch/project_465001902/datasets/
    output: /pfs/lustrep3/scratch/project_465001902/experiments/replace-me/
    graph: /pfs/lustrep3/scratch/project_465001902/graphs/
  files:
    dataset:
      dataset_main: norkystv3_hindcast_2012-2024.zarr
      dataset_force12-16: norkystv3_forcing_zarr/forcing_norkystv3_hindcast_2012-2016.zarr  # Enable this for longer training. Then exclude cloud.
      dataset_force17-24: norkystv3_forcing_zarr/forcing_norkystv3_hindcast_2017-2024.zarr
    graph: LAM-trimedge-10-res-12-scale12.pt 
    warm_start: null #specific checkpoint to start from, defaults to last.ckpt

  #num_gpus_per_node: 1 # using slurm.yaml so these two are now read from SLURM env vars set in lumi_jobscript.sh
  #num_nodes: 1
  num_gpus_per_model: 8 # TODO: 8 better? This is so-called "model-paralell"

graph:
  overwrite: False # only create/re-generate the graph with True

model: 
  num_channels: 256 #1024 #TODO: this number dont have to be so large when have few vars, use higher nr when have more layers vars. Test to see if higher than 256 gives added value. Or higher when have less mesh points (remove land)
  trainable_parameters:
    data: 0
    hidden: 0
    data2hidden: 0
    hidden2data: 0
    hidden2hidden: 0 # GNN and GraphTransformer Processor only
  bounding: #These are applied in order
    - _target_: anemoi.models.layers.bounding.ReluBounding
      variables: [] #[salinity_0]
    #- _target_: anemoi.models.layers.bounding.NormalizedReluBounding
    #  variables: [temperature_0]
    #  min_val: [-2]
    #  normalizer: ['mean-std']
  output_mask: # suggested by lam.yaml
    _target_: anemoi.training.utils.masks.Boolean1DMask
    nodes_name: ${graph.data}
    attribute_name: cutout_mask

training:
  # This section is to avoid using variable_loss_scaling 
  training_loss:
    # loss class to initialise
    _target_: anemoi.training.losses.MSELoss
    # Scalers to include in loss calculation
    scalers: ['general_variable', 'nan_mask_weights', 'node_weights']
    ignore_nans: False
  
  metrics: # this used to list only a few variables
  - 'all'  

  #TODO rollout is here

  run_id: null # checkpoint id for the experiment in with output_base as root, null for random name, =fork_run_id to continue training in the same folder.
  fork_run_id: null #path to the experiment to fork from with output_base as root
  load_weights_only: False #loads entire model if False, loads only weights if True
  
  max_epochs: null
  max_steps: 20000
  lr:
    warmup: 1000 # number of warmup iterations
    rate: 6.25e-5 #local_lr
    iterations: ${training.max_steps} # NOTE: When max_epochs < max_steps, scheduler will run for max_steps
    min: 3e-7 #Not scaled by #GPU

